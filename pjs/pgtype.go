package pjs

import "github.com/jackc/pgtype"

func getOb(oid uint32) interface{} {
	switch oid {
	case pgtype.BoolOID:
		return new(pgtype.Bool)
	case pgtype.ByteaOID:
		return new(pgtype.ByteaArray)
	case pgtype.QCharOID:
		return new(pgtype.QChar)
	case pgtype.NameOID:
		return new(pgtype.Name)
	case pgtype.Int8OID:
		return new(pgtype.Int8)
	case pgtype.Int2OID:
		return new(pgtype.Int2)
	case pgtype.Int4OID:
		return new(pgtype.Int4)
	case pgtype.TextOID:
		return new(pgtype.Text)
	case pgtype.OIDOID:
		return new(pgtype.OID)
	case pgtype.TIDOID:
		return new(pgtype.TID)
	case pgtype.XIDOID:
		return new(pgtype.XID)
	case pgtype.CIDOID:
		return new(pgtype.CID)
	case pgtype.JSONOID:
		return new(pgtype.JSON)
	case pgtype.PointOID:
		return new(pgtype.Point)
	case pgtype.LsegOID:
		return new(pgtype.Lseg)
	case pgtype.PathOID:
		return new(pgtype.Path)
	case pgtype.BoxOID:
		return new(pgtype.Box)
	case pgtype.PolygonOID:
		return new(pgtype.Polygon)
	case pgtype.LineOID:
		return new(pgtype.Line)
	case pgtype.CIDROID:
		return new(pgtype.CIDR)
	case pgtype.CIDRArrayOID:
		return new(pgtype.CIDRArray)
	case pgtype.Float4OID:
		return new(pgtype.Float4)
	case pgtype.Float8OID:
		return new(pgtype.Float8)
	case pgtype.CircleOID:
		return new(pgtype.Circle)
	case pgtype.UnknownOID:
		return new(pgtype.Unknown)
	case pgtype.MacaddrOID:
		return new(pgtype.Macaddr)
	case pgtype.InetOID:
		return new(pgtype.Inet)
	case pgtype.BoolArrayOID:
		return new(pgtype.BoolArray)
	case pgtype.Int2ArrayOID:
		return new(pgtype.Int2Array)
	case pgtype.Int4ArrayOID:
		return new(pgtype.Int4Array)
	case pgtype.TextArrayOID:
		return new(pgtype.TextArray)
	case pgtype.ByteaArrayOID:
		return new(pgtype.ByteaArray)
	case pgtype.BPCharArrayOID:
		return new(pgtype.BPCharArray)
	case pgtype.VarcharArrayOID:
		return new(pgtype.VarcharArray)
	case pgtype.Int8ArrayOID:
		return new(pgtype.Int8Array)
	case pgtype.Float4ArrayOID:
		return new(pgtype.Float4Array)
	case pgtype.Float8ArrayOID:
		return new(pgtype.Float8Array)
	case pgtype.ACLItemOID:
		return new(pgtype.ACLItem)
	case pgtype.ACLItemArrayOID:
		return new(pgtype.ACLItemArray)
	case pgtype.InetArrayOID:
		return new(pgtype.InetArray)
	case pgtype.BPCharOID:
		return new(pgtype.BPChar)
	case pgtype.VarcharOID:
		return new(pgtype.Varchar)
	case pgtype.DateOID:
		return new(pgtype.Date)
	case pgtype.TimeOID:
		return new(pgtype.Time)
	case pgtype.TimestampOID:
		return new(pgtype.Timestamp)
	case pgtype.TimestampArrayOID:
		return new(pgtype.TimestampArray)
	case pgtype.DateArrayOID:
		return new(pgtype.DateArray)
	case pgtype.TimestamptzOID:
		return new(pgtype.Timestamptz)
	case pgtype.TimestamptzArrayOID:
		return new(pgtype.TimestamptzArray)
	case pgtype.IntervalOID:
		return new(pgtype.Interval)
	case pgtype.NumericArrayOID:
		return new(pgtype.NumericArray)
	case pgtype.BitOID:
		return new(pgtype.Bit)
	case pgtype.VarbitOID:
		return new(pgtype.Varbit)
	case pgtype.NumericOID:
		return new(pgtype.Numeric)
	case pgtype.RecordOID:
		return new(pgtype.Record)
	case pgtype.UUIDOID:
		return new(pgtype.UUID)
	case pgtype.UUIDArrayOID:
		return new(pgtype.UUIDArray)
	case pgtype.JSONBOID:
		return new(pgtype.JSONB)
	case pgtype.JSONBArrayOID:
		return new(pgtype.JSONBArray)
	case pgtype.DaterangeOID:
		return new(pgtype.Daterange)
	case pgtype.Int4rangeOID:
		return new(pgtype.Int4range)
	case pgtype.NumrangeOID:
		return new(pgtype.Numrange)
	case pgtype.TsrangeOID:
		return new(pgtype.Tsrange)
	case pgtype.TstzrangeOID:
		return new(pgtype.Tstzrange)
	case pgtype.Int8rangeOID:
		return new(pgtype.Int8range)
	// Better than returning nil and seems to work.
	// There are definitely _some_ uncommon OIDs that are not in this list.
	// I'm unsure if they can all be unmarshalled into text...
	default:
		return new(pgtype.Text)
	}
}
